/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Cs;
import db.Indexes;
import db.Keys;
import db.tables.records.MessagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cs.messages</code>
     */
    public static final Messages MESSAGES = new Messages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>cs.messages.id</code>.
     */
    public final TableField<MessagesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cs.messages.content</code>.
     */
    public final TableField<MessagesRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cs.messages.sender_id</code>.
     */
    public final TableField<MessagesRecord, Integer> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cs.messages.receiver_id</code>.
     */
    public final TableField<MessagesRecord, Integer> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cs.messages.created_date</code>.
     */
    public final TableField<MessagesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private Messages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cs.messages</code> table reference
     */
    public Messages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>cs.messages</code> table reference
     */
    public Messages(Name alias) {
        this(alias, MESSAGES);
    }

    /**
     * Create a <code>cs.messages</code> table reference
     */
    public Messages() {
        this(DSL.name("messages"), null);
    }

    public <O extends Record> Messages(Table<O> child, ForeignKey<O, MessagesRecord> key) {
        super(child, key, MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cs.CS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MESSAGES_RECEIVER_ID, Indexes.MESSAGES_SENDER_ID);
    }

    @Override
    public Identity<MessagesRecord, Integer> getIdentity() {
        return (Identity<MessagesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessagesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGES_PRIMARY;
    }

    @Override
    public List<ForeignKey<MessagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MESSAGES_IBFK_1, Keys.MESSAGES_IBFK_2);
    }

    private transient Users _messagesIbfk_1;
    private transient Users _messagesIbfk_2;

    /**
     * Get the implicit join path to the <code>cs.users</code> table, via the
     * <code>messages_ibfk_1</code> key.
     */
    public Users messagesIbfk_1() {
        if (_messagesIbfk_1 == null)
            _messagesIbfk_1 = new Users(this, Keys.MESSAGES_IBFK_1);

        return _messagesIbfk_1;
    }

    /**
     * Get the implicit join path to the <code>cs.users</code> table, via the
     * <code>messages_ibfk_2</code> key.
     */
    public Users messagesIbfk_2() {
        if (_messagesIbfk_2 == null)
            _messagesIbfk_2 = new Users(this, Keys.MESSAGES_IBFK_2);

        return _messagesIbfk_2;
    }

    @Override
    public Messages as(String alias) {
        return new Messages(DSL.name(alias), this);
    }

    @Override
    public Messages as(Name alias) {
        return new Messages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(String name) {
        return new Messages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(Name name) {
        return new Messages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
